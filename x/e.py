








































































#GUGUGAGA
#ENC BY JOHN HORN
#JH-DV-JH-DV







































































dika = ''
import base64, marshal
exec(marshal.loads(base64.b64decode(dika)))