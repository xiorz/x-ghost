








































































#GUGUGAGA
#ENC BY JOHN HORN
#JH-DV-JH-DV







































































john = ''
import base64
exec(base64.b64decode(john).decode())